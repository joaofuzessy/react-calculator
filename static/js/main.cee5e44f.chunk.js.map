{"version":3,"sources":["components/Button/Button.js","main/Calculator.js","components/Display/Display.js","serviceWorker.js","index.js"],"names":["props","onClick","e","click","label","className","operation","double","triple","initialState","displayValue","clearDisplay","values","current","Calculator","state","clearMemory","bind","setOperation","addDigit","this","setState","equals","currentOperation","eval","n","includes","i","newValue","parseFloat","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cee5e44f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.scss'\r\n\r\nexport default props =>\r\n<button \r\n        onClick={e => props.click && props.click(props.label)}\r\n        className={`\r\n                    ${props.operation ? 'operation' : ''}\r\n                    ${props.double ? 'double' : ''}\r\n                    ${props.triple ? 'triple' : ''}\r\n                  `}>\r\n    {props.label}\r\n</button>","import React, {Component} from 'react'\r\nimport './Calculator.scss'\r\nimport Button from '../components/Button/Button'\r\nimport Display from '../components/Display/Display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\n\r\n\r\nexport default class Calculator extends Component {\r\n    \r\n    state = {...initialState}\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory(){\r\n        this.setState({...initialState})\r\n    }\r\n\r\n    setOperation(operation){\r\n        if(this.state.current === 0){\r\n            this.setState({operation, current: 1, clearDisplay: true})\r\n        }\r\n        else{\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n            const values = [...this.state.values]\r\n\r\n            try{\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n\r\n            } catch(e){\r\n                values[0] = this.state.values[0]\r\n            }\r\n\r\n            values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n){\r\n        if(n === '.' && this.state.displayValue.includes('.')){\r\n            return\r\n        }\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({displayValue, clearDisplay: false})\r\n\r\n        if(n !== '.'){\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({ values })\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n       return(\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue}></Display>\r\n                <Button label=\"AC\" click={this.clearMemory} triple></Button>\r\n                <Button label=\"/\" click={this.setOperation} operation></Button>\r\n                <Button label=\"7\" click={this.addDigit}></Button>\r\n                <Button label=\"8\" click={this.addDigit}></Button>\r\n                <Button label=\"9\" click={this.addDigit}></Button>\r\n                <Button label=\"*\" click={this.setOperation} operation></Button>\r\n                <Button label=\"4\" click={this.addDigit}></Button>\r\n                <Button label=\"5\" click={this.addDigit}></Button>\r\n                <Button label=\"6\" click={this.addDigit}></Button>\r\n                <Button label=\"-\" click={this.setOperation} operation></Button>\r\n                <Button label=\"1\" click={this.addDigit}></Button>\r\n                <Button label=\"2\" click={this.addDigit}></Button>\r\n                <Button label=\"3\" click={this.addDigit}></Button>\r\n                <Button label=\"+\" click={this.setOperation} operation></Button>\r\n                <Button label=\"0\" click={this.addDigit} double ></Button>\r\n                <Button label=\".\" click={this.addDigit}></Button>\r\n                <Button label=\"=\" click={this.setOperation} operation></Button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './Display.scss'\r\n\r\nexport default props => \r\n    <div className=\"display\">{props.value}</div>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}